import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain_core.tools import tool
from langchain.agents import initialize_agent, AgentType
from langchain.memory import ConversationBufferMemory



load_dotenv()
api_key = os.getenv("OPENROUTER_API_KEY")
base_url = os.getenv("OPENROUTER_BASE_URL", "https://openrouter.ai/api/v1")

if not api_key:
    raise ValueError("OPENROUTER_API_KEY missing in .env")



llm = ChatOpenAI(
    model="mistralai/mistral-7b-instruct",
    temperature=0.7,
    max_tokens=256,
    api_key=api_key,
    base_url=base_url
)



memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)



@tool
def count(text: str) -> str:
    """Count the number of words in a sentence."""
    num_words = len(text.strip().split())
    return f"Your sentence has {num_words} words."

@tool
def reverse(text: str) -> str:
    """Reverse the word order in a sentence."""
    return " ".join(text.strip().split()[::-1])

@tool
def define(word: str) -> str:
    """Give a synonym or short definition of a word."""
    prompt = f"Define the word '{word}' in simple terms."
    return llm.invoke(prompt).content

@tool
def upper(text: str) -> str:
    """Convert text to uppercase."""
    return text.upper()

@tool
def lower(text: str) -> str:
    """Convert text to lowercase."""
    return text.lower()

@tool
def repeat(text: str) -> str:
    """Repeat a word a specified number of times. Format: 'word count'."""
    try:
        parts = text.strip().split()
        word = parts[0]
        count = int(parts[1])
        return " ".join([word] * count)
    except Exception:
        return "Please use format: repeat hello 3"

@tool
def history(dummy: str) -> str:
    """Show previous inputs and outputs."""
    messages = memory.load_memory_variables({}).get("chat_history", [])
    if not messages:
        return "No history yet."
    return "\n".join([f"{msg.type.capitalize()}: {msg.content}" for msg in messages])

tools = [count, reverse, define, upper, lower, repeat, history]



agent = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.CONVERSATIONAL_REACT_DESCRIPTION,
    memory=memory,
    verbose=False,
    handle_parsing_errors=True
)



print("\n=== Mini Language Utility Bot ===")
print("Type 'exit' to quit.\n")

while True:
    user_input = input("You: ").strip()
    if user_input.lower() == "exit":
        print("\nGoodbye! Keep learning ðŸ§ ")
        break

    try:
        response = agent.run(user_input)
        print("Agent:", response)
    except Exception as e:
        print("Agent: Something went wrong:", str(e))
